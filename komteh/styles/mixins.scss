@mixin transitionL($time) {
  cursor: pointer;
  transition: background $time linear, color $time linear, border $time linear, max-height $time linear;
}
@mixin gradient($colorFirst, $colorSecond) {
  background:$colorFirst;
  background: -moz-linear-gradient(top,$colorFirst 0%, $cSecond 30%);
  background: -webkit-gradient(left top, left bottom, color-stop(0%,$colorFirst), color-stop(30%, $cSecond));
  background: -webkit-linear-gradient(top,$colorFirst 0%, $cSecond 30%);
  background: -o-linear-gradient(top,$colorFirst 0%, $cSecond 30%);
  background: -ms-linear-gradient(top,$colorFirst 0%, $cSecond 30%);
  background: linear-gradient(to bottom,$colorFirst 0%, $cSecond 30%);
  filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#b2b3b5', endColorstr='#ffffff', GradientType=0 );
}

@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }
  @return $number;
}
@function calcFluidFontSize($f-min, $f-max, $w-min, $w-max, $units: px) {
  $f-min: strip-unit($f-min);
  $f-max: strip-unit($f-max);
  $w-min: strip-unit($w-min);
  $w-max: strip-unit($w-max);
	$k: ($f-max - $f-min)/($w-max - $w-min);
	$b: $f-min - $k * $w-min;
	$b: $b + $units;
	@return calc( #{$k} * 100vw + #{$b} );
}
@mixin fluidFontSize($f-min, $f-max, $w-min, $w-max, $l-h, $fallback: false) {
  font-size: $f-min;
  line-height: $l-h;
  @media (min-width: $w-min) {
    @if ($fallback) {
      font-size: $fallback;
    }
    font-size: calcFluidFontSize($f-min, $f-max, $w-min, $w-max, px);
  }
  @media (min-width: $w-max) {
    font-size: $f-max;
  }
}
